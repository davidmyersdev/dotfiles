#!/usr/bin/env zsh

####################
##    doximity    ##
####################

export ADS_APPS="doximity doximity-workers activities activities-daemons activities-workers analytics-webhook campaigns campaigns-daemons campaigns-workers doximity-client-vue-memcached spectrum"
export ADS_WORKSPACE="$HOME/workspace/work"

# Initialize the `dox-compose` command.
eval "$("$HOME/workspace/work/dox-compose/bin/dox-init")"

# List all Ads services.
alias ads-ls="echo $ADS_APPS"

# Docker utilities
alias ads-start="dox-dc up -d $ADS_APPS"
alias ads-stop="dox-dc down"
alias ads-restart="ads-stop && ads-start"
alias ads-logs="dox-dc logs -f $ADS_APPS"

# Navigation utilities
alias cd-ads="cd $ADS_WORKSPACE"
alias cd-activities="cd $ADS_WORKSPACE/activities"
alias cd-campaigns="cd $ADS_WORKSPACE/campaigns"
alias cd-doximity="cd $ADS_WORKSPACE/doximity"
alias cd-vue="cd $ADS_WORKSPACE/doximity-client-vue"

# Run a non-interactive command against all Ads apps in parallel. E.g.
#
# $ ads-parallel git diff
# $ ads-parallel dox-do -T bin/rails some_task
function ads-parallel() {
  dox-parallel "source $HOME/.doxrc && is-ads-app && ${@}"
}

# Run `dox-update-app` for all Ads apps in parallel.
function ads-update() {
  ads-parallel dox-update-app
}

# Launch an interactive `bash` shell in the Docker container for the current app.
function dox-bash() {
  dox-do bash
}

# Run `bundle` in the Docker container for the current app.
function dox-bundle() {
  if [ -f "Gemfile" ]
  then
    dox-do -T bash -c "which bundle && bundle"
  fi
}

# Run `dox-dc logs <service>` without specifying the service name for the current app.
function dox-logs() {
  dox-dc logs --tail 500 $@ "$(basename "$(git rev-parse --show-toplevel)")"
}


# Run `bundle exec rails db:migrate` in the Docker container for the current app.
function dox-migrate() {
  if [ -f "Gemfile" ] && [ ! -z "$(cat Gemfile | grep 'gem \"rails\"')" ]
  then
    local changes="$(git status --porcelain)"

    dox-do -T bash -c "which bundle && bundle exec rails db:migrate"

    [ -z "$changes" ] && sleep 2 && git reset --hard HEAD
  fi
}

# Launch an interactive `rails` command in the Docker container for the current app.
function dox-rails() {
  if [ -f "Gemfile" ] && [ ! -z "$(cat Gemfile | grep 'gem \"rails\"')" ]
  then
    dox-do bash -c "which bundle && bundle exec rails $@"
  fi
}

# Run `dox-dc restart <service>` without specifying the service name for the current app.
function dox-restart() {
  dox-dc restart "$(basename "$(git rev-parse --show-toplevel)")"
}

# Pull latest changes, install dependencies, and run migrations for the current app.
function dox-update-app() {
  if is-clean
  then
    echo "Updating app..."

    git fetch --all --prune
    git checkout master
    git pull
    dox-yarn
    dox-bundle
    dox-migrate
    # ignore any changes made by the migration
    git reset --hard HEAD
    git checkout - # checkout the previous branch
  else
    echo "Commit or discard changes first. Skipping app..."
  fi
}

# Run `yarn` or `npm install` in the Docker container for the current app.
function dox-yarn() {
  if [ -f "yarn.lock" ]
  then
    dox-do -T bash -c "which yarn && yarn"
  elif [ -f "package-lock.json" ]
  then
    dox-do -T bash -c "which npm && npm install"
  fi
}

# Check whether the current directory is an Ads app.
function is-ads-app() {
  if [[ " $ADS_APPS " =~ " $(basename `pwd`) " ]]
  then
    true
  else
    false
  fi
}

# Check whether the current directory has uncommitted git changes.
function is-clean() {
  if [ -z "$(git status --porcelain)" ]
  then
    true
  else
    false
  fi
}
