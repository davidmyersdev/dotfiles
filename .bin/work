#!/usr/bin/env bash

if [[ -z "$(command -v jira)" ]]
then
  echo 'Please install the `jira` command (https://github.com/ankitpokhrel/jira-cli) to use this script.'
  exit 1
fi

config_dir="$HOME/.config/work-cli"
cache_dir="$config_dir/cache"
data_dir="$config_dir/data"

mkdir -p "$config_dir"
mkdir -p "$cache_dir"
mkdir -p "$data_dir"

# defaults
cache_ttl=3600 # 1hr
command='help'

# Handle flags/arguments
while [ $# -gt 0 ]
do
  case "$1" in
    help)
      showhelp=true
      shift
      ;;
    list)
      command='list'
      shift
      ;;
    status)
      command='status'
      shift
      ;;
    -h|--help)
      showhelp=true
      shift
      ;;
    --cache-ttl)
      cache_ttl=$2
      shift 2
      ;;
    --*)
      echo "Unknown option: '$1'"
      exit 1
      ;;
    -*)
      echo "Unknown option: '$1'"
      exit 1
      ;;
    *)
      echo "Unknown command: '$1'"
      exit 1
      ;;
  esac
done

function bold() {
  echo -n "$(tput bold)${1}$(tput sgr0)"
}

function check_cache() {
  cache_file="$1"

  mkdir -p "$cache_dir"

  if [[ -f "$cache_file" ]]
  then
    cache_age=$(($(date +%s) - $(date -r "$cache_file" +%s)))

    if [[ $cache_age -gt $cache_ttl ]]
    then
      update_cache "$cache_file"
    fi
  else
    update_cache "$cache_file"
  fi
}

function print_help() {
  cat << HELP
A simple utility to manage your work.

$(bold USAGE)
  work <command> [flags]

$(bold COMMANDS)
  help    Show available commands, flags, and examples for using this tool
  list    Show a list of your open issues
  status  Show the current status of the issue you're working on

$(bold FLAGS)
  -h, --help            Show available commands, flags, and examples for using this tool
  --cache-ttl <number>  Set the cache TTL in seconds (default: 3600)

$(bold EXAMPLES)
  $ work help
  $ work list
  $ work list --cache-ttl 60
HELP
}

function read_cache() {
  cache_file="$1"

  check_cache "$cache_file"

  cat "$cache_file"
}

function run_list() {
  cache_name="list.txt"
  cache_file="$cache_dir/$cache_name"

  read_cache "$cache_file"
}

function run_status() {
  if [[ -z "$issue" ]]
  then
    echo "No issues are active."
  else
    echo "Active issue: $issue"
  fi
}

function update_cache() {
  cache_file="$1"

  jira issue list --assignee $(jira me) -q 'status not in (Done, "Will Not Do")' --plain --order-by priority > "$cache_file"
}

if [[ "$command" == "help" || "$showhelp" == "true" ]]
then
  print_help
  exit 0
fi

case "$command" in
  list)
    run_list
    ;;
  status)
    run_status
    ;;
esac
