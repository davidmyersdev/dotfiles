#!/usr/bin/env zsh

####################
##    doximity    ##
####################

export ADS_APPS="activities activities-daemons activities-workers analytics-webhook campaigns campaigns-daemons campaigns-mlr campaigns-workers dialer-api doc-news doc-news-workers doximity doximity-daemons doximity-workers doximity-client-vue-memcached feed-experience graphql-federation push-notification-api spectrum"
export DOX_ROOT="$HOME/dox"
export DOX_HOME="$DOX_ROOT/work"

# Initialize the `dox-compose` command.
eval "$("$DOX_ROOT/work/dox-compose/bin/dox-init")"

# Add `ads-cli` binaries to the path.
export PATH="$HOME/pub/doximity-tools/apps/ads-cli/bin:$PATH"

# List all Ads services.
alias ads-ls="echo $ADS_APPS"

# Docker utilities
alias ads-start="dox-dc up -d --wait $ADS_APPS"
alias ads-stop="dox-dc down"
alias ads-restart="ads-stop && ads-start"
alias ads-logs="dox-dc logs -f $ADS_APPS"
alias ddo="dox-do"
alias ddc="dox-dc"

# The `dox-compose-start` function is invoked automatically after running `dox-cloud on`.
#
# #!/usr/bin/env zsh
#
# if typeset -f dox-compose-start > /dev/null
# then
#   dox-compose-start
# else
#   echo 'No `dox-compose-start` function defined.'
# fi
function dox-compose-start() {
  dox-dc up -d campaigns graphql-federation dialer-api
}

# Run a non-interactive command against all Ads apps in parallel. E.g.
#
# $ ads-parallel git diff
# $ ads-parallel dox-do -T bin/rails some_task
function ads-parallel() {
  dox-parallel "source $HOME/.doxrc && is-ads-app && ${@}"
}

# Run `dox-update-app` for all Ads apps in parallel.
function ads-update() {
  ads-parallel dox-update-app
}

# Run `bundle` in the Docker container for the current app.
function dox-bundle() {
  if [ -f "Gemfile" ]
  then
    dox-do -T bash -c "which bundle && bundle"
  fi
}

# List all available services.
function dox-dc-all-services() {
  dox-dc-config --services | sort
}

# List all available volumes.
function dox-dc-all-volumes() {
  dox-dc-config --volumes | sort
}

# Run `dox-dc config` without checking for AWS credentials.
function dox-dc-config() {
  dox-dc-without-aws config $@
}

# Run `dox-dc` without checking for AWS credentials.
function dox-dc-without-aws() {
  DISABLE_AWS_VAULT=true dox-dc $@
}

# Deploy the current app branch to the specified environment (e.g. `dev-ads-1`).
function dox-deploy() {
  local env="$1"

  local app="$(basename `pwd`)"
  local branch="$(git rev-parse --abbrev-ref HEAD)"

  dox deploy $env $app --yes --revision=$branch
}

# Run `dox-dc logs <service>` without specifying the service name for the current app.
function dox-logs() {
  dox-dc logs --tail 500 $@ "$(basename "$(git rev-parse --show-toplevel)")"
}

# Run `bundle exec rails db:migrate` in the Docker container for the current app.
function dox-migrate() {
  if [ -f "Gemfile" ] && [ ! -z "$(cat Gemfile | grep 'gem \"rails\"')" ]
  then
    local changes="$(git status --porcelain)"

    dox-do -T bash -c "which bundle && bundle exec rails db:migrate"

    [ -z "$changes" ] && sleep 2 && git reset --hard HEAD && git clean -fd
  fi
}

# Launch an interactive `rails` command in the Docker container for the current app.
function dox-rails() {
  if [ -f "Gemfile" ] && [ ! -z "$(cat Gemfile | grep 'gem \"rails\"')" ]
  then
    dox-do bash -c "which bundle && bundle exec rails $@"
  fi
}

# Run `dox-dc restart <service>` without specifying the service name for the current app.
function dox-restart() {
  dox-dc restart "$(basename "$(git rev-parse --show-toplevel)")"
}

function dox-native-add() {
  app="$1"

  if [[ "$app" == "dialer-web" ]]
  then
    sudo dox-cloud native-service dialer 127.0.0.2 3000
  elif [[ "$app" == "doximity-client-vue" ]]
  then
    sudo dox-cloud native-service vueclient 127.0.0.4 5180
  else
    echo "$app is not recognized"
    exit 1
  fi
}

function dox-native-remove() {
  app="$1"

  if [[ "$app" == "dialer-web" ]]
  then
    sudo dox-cloud remove-native-service dialer 127.0.0.2
  elif [[ "$app" == "doximity-client-vue" ]]
  then
    sudo dox-cloud remove-native-service vueclient 127.0.0.4
  else
    echo "$app is not recognized"
    exit 1
  fi
}

function dox-native-reset() {
  app="$1"

  dox-native-remove $app
  dox-native-add $app
}

# Pull latest changes, install dependencies, and run migrations for the current app.
function dox-update-app() {
  if is-clean
  then
    echo "Updating app..."

    git fetch --all --prune
    git checkout master
    git pull
    dox-yarn
    dox-bundle
    dox-migrate
    git checkout - # checkout the previous branch
  else
    echo "Commit or discard changes first. Skipping app..."
  fi
}

# Run `yarn` or `npm install` in the Docker container for the current app.
function dox-yarn() {
  if [ -f "yarn.lock" ]
  then
    dox-do -T bash -c "which yarn && yarn"
  elif [ -f "package-lock.json" ]
  then
    dox-do -T bash -c "which npm && npm install"
  fi
}

# Run `yarn add` for multi-app projects.
function dox-yarn-add() {
  local package="$1"

  set -x

  yarn add $package

  if [ -f "./app/package.json" ]
  then
    mv ./node_modules ./node_modules.backup
    cd ./app
    NODE_PATH=./node_modules yarn install
    NODE_PATH=./node_modules yarn add $package
    cd ..
    mv ./node_modules.backup ./node_modules
  fi
}

# Check whether the current directory is an Ads app.
function is-ads-app() {
  if [[ " $ADS_APPS " =~ " $(basename `pwd`) " ]]
  then
    true
  else
    false
  fi
}

# Check whether the current directory has uncommitted git changes.
function is-clean() {
  if [ -z "$(git status --porcelain)" ]
  then
    true
  else
    false
  fi
}
